<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
// --------------------------------------------------------
// The number of type parameters to support.
// If you need a function that depends on more parameters,
// update the count here and regenerate the T4 template.
// --------------------------------------------------------
var count = 16;

#>
namespace Toggl.Multivac
{
    public static class HashCode
    {
        public static int seed = 17;
        public static int hashMultiplier = 92821;
        
<#
        for(var paramCount = count; paramCount >= 3; paramCount--)
        {
            CreateFromMethod(paramCount);
        }
#>
        public static int From<T0, T1>(T0 item0, T1 item1)
        {
            unchecked
            {
                var hash = seed;
                hash = hash * hashMultiplier + item0.GetHashCode();
                hash = hash * hashMultiplier + item1.GetHashCode();
                return hash;
            }
        }
    }
}


<#+   // Start of class feature block
private void CreateFromMethod(int typeParametersCount)
{
    var items = Enumerable.Range(0, typeParametersCount);
    
    var typeParamsEnumerable = items.Select(n => $"T{n}");
    var typeParams = string.Join(", ", typeParamsEnumerable);
    
    var argumentsEnumerable = items.Select(n => $"T{n} item{n}");
    var arguments = string.Join(", ", argumentsEnumerable);
    
    var callArgumentsEnumerable = items.Select(n => $"item{n}").Skip(1);
    var callArguments = string.Join(", ", callArgumentsEnumerable);
    
    #>
        public static int From<<#= typeParams #>>(<#= arguments #>)
        {
            unchecked
            {
                return seed * From(<#= callArguments #>) + item0.GetHashCode();
            }
        }

<#+
}
#>